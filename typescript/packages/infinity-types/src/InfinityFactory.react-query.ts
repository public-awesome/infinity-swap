/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { InstantiateMsg, ExecuteMsg, BondingCurve, Uint128, Decimal, PairType, PairConfigForString, PairImmutableForString, QueryMsg, Addr, Binary, NextPairResponse } from "./InfinityFactory.types";
import { InfinityFactoryQueryClient } from "./InfinityFactory.client";
export const infinityFactoryQueryKeys = {
  contract: ([{
    contract: "infinityFactory"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...infinityFactoryQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  nextPair: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...infinityFactoryQueryKeys.address(contractAddress)[0],
    method: "next_pair",
    args
  }] as const)
};
export const infinityFactoryQueries = {
  nextPair: <TData = NextPairResponse,>({
    client,
    args,
    options
  }: InfinityFactoryNextPairQuery<TData>): UseQueryOptions<NextPairResponse, Error, TData> => ({
    queryKey: infinityFactoryQueryKeys.nextPair(client?.contractAddress, args),
    queryFn: () => client ? client.nextPair({
      sender: args.sender
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface InfinityFactoryReactQuery<TResponse, TData = TResponse> {
  client: InfinityFactoryQueryClient | undefined;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface InfinityFactoryNextPairQuery<TData> extends InfinityFactoryReactQuery<NextPairResponse, TData> {
  args: {
    sender: string;
  };
}
export function useInfinityFactoryNextPairQuery<TData = NextPairResponse>({
  client,
  args,
  options
}: InfinityFactoryNextPairQuery<TData>) {
  return useQuery<NextPairResponse, Error, TData>(infinityFactoryQueryKeys.nextPair(client?.contractAddress, args), () => client ? client.nextPair({
    sender: args.sender
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}