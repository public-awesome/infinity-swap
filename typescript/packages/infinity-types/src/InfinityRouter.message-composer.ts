/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, NftForTokensSource, Uint128, TokensForNftSource, SellOrder, SwapParamsForString, QueryMsg, Addr, ArrayOfNftForTokensQuote, NftForTokensQuote, ArrayOfTokensForNftQuote, TokensForNftQuote } from "./InfinityRouter.types";
export interface InfinityRouterMessage {
  contractAddress: string;
  sender: string;
  swapNftsForTokens: ({
    collection,
    denom,
    filterSources,
    sellOrders,
    swapParams
  }: {
    collection: string;
    denom: string;
    filterSources?: NftForTokensSource[];
    sellOrders: SellOrder[];
    swapParams?: SwapParamsForString;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  swapTokensForNfts: ({
    collection,
    denom,
    filterSources,
    maxInputs,
    swapParams
  }: {
    collection: string;
    denom: string;
    filterSources?: TokensForNftSource[];
    maxInputs: Uint128[];
    swapParams?: SwapParamsForString;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class InfinityRouterMessageComposer implements InfinityRouterMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.swapNftsForTokens = this.swapNftsForTokens.bind(this);
    this.swapTokensForNfts = this.swapTokensForNfts.bind(this);
  }

  swapNftsForTokens = ({
    collection,
    denom,
    filterSources,
    sellOrders,
    swapParams
  }: {
    collection: string;
    denom: string;
    filterSources?: NftForTokensSource[];
    sellOrders: SellOrder[];
    swapParams?: SwapParamsForString;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          swap_nfts_for_tokens: {
            collection,
            denom,
            filter_sources: filterSources,
            sell_orders: sellOrders,
            swap_params: swapParams
          }
        })),
        funds: _funds
      })
    };
  };
  swapTokensForNfts = ({
    collection,
    denom,
    filterSources,
    maxInputs,
    swapParams
  }: {
    collection: string;
    denom: string;
    filterSources?: TokensForNftSource[];
    maxInputs: Uint128[];
    swapParams?: SwapParamsForString;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          swap_tokens_for_nfts: {
            collection,
            denom,
            filter_sources: filterSources,
            max_inputs: maxInputs,
            swap_params: swapParams
          }
        })),
        funds: _funds
      })
    };
  };
}