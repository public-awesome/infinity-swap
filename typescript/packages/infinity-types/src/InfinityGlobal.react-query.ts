/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { Decimal, Uint128, InstantiateMsg, GlobalConfigForString, Coin, ExecuteMsg, QueryMsg, Addr, GlobalConfigForAddr, NullableCoin } from "./InfinityGlobal.types";
import { InfinityGlobalQueryClient } from "./InfinityGlobal.client";
export const infinityGlobalQueryKeys = {
  contract: ([{
    contract: "infinityGlobal"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...infinityGlobalQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  globalConfig: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...infinityGlobalQueryKeys.address(contractAddress)[0],
    method: "global_config",
    args
  }] as const),
  minPrice: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...infinityGlobalQueryKeys.address(contractAddress)[0],
    method: "min_price",
    args
  }] as const)
};
export const infinityGlobalQueries = {
  globalConfig: <TData = GlobalConfigForAddr,>({
    client,
    options
  }: InfinityGlobalGlobalConfigQuery<TData>): UseQueryOptions<GlobalConfigForAddr, Error, TData> => ({
    queryKey: infinityGlobalQueryKeys.globalConfig(client?.contractAddress),
    queryFn: () => client ? client.globalConfig() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  minPrice: <TData = NullableCoin,>({
    client,
    args,
    options
  }: InfinityGlobalMinPriceQuery<TData>): UseQueryOptions<NullableCoin, Error, TData> => ({
    queryKey: infinityGlobalQueryKeys.minPrice(client?.contractAddress, args),
    queryFn: () => client ? client.minPrice({
      denom: args.denom
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface InfinityGlobalReactQuery<TResponse, TData = TResponse> {
  client: InfinityGlobalQueryClient | undefined;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface InfinityGlobalMinPriceQuery<TData> extends InfinityGlobalReactQuery<NullableCoin, TData> {
  args: {
    denom: string;
  };
}
export function useInfinityGlobalMinPriceQuery<TData = NullableCoin>({
  client,
  args,
  options
}: InfinityGlobalMinPriceQuery<TData>) {
  return useQuery<NullableCoin, Error, TData>(infinityGlobalQueryKeys.minPrice(client?.contractAddress, args), () => client ? client.minPrice({
    denom: args.denom
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfinityGlobalGlobalConfigQuery<TData> extends InfinityGlobalReactQuery<GlobalConfigForAddr, TData> {}
export function useInfinityGlobalGlobalConfigQuery<TData = GlobalConfigForAddr>({
  client,
  options
}: InfinityGlobalGlobalConfigQuery<TData>) {
  return useQuery<GlobalConfigForAddr, Error, TData>(infinityGlobalQueryKeys.globalConfig(client?.contractAddress), () => client ? client.globalConfig() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}