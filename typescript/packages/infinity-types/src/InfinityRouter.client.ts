/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, NftForTokensSource, Uint128, TokensForNftSource, SellOrder, SwapParamsForString, QueryMsg, Addr, NftForTokensSourceData, BondingCurve, Decimal, PairType, ArrayOfNftForTokensQuote, NftForTokensQuote, Pair, PairConfigForAddr, PairImmutableForAddr, PairInternal, QuoteSummary, TokenPayment, TokensForNftSourceData, ArrayOfTokensForNftQuote, TokensForNftQuote } from "./InfinityRouter.types";
export interface InfinityRouterReadOnlyInterface {
  contractAddress: string;
  nftsForTokens: ({
    collection,
    denom,
    filterSources,
    limit
  }: {
    collection: string;
    denom: string;
    filterSources?: NftForTokensSource[];
    limit: number;
  }) => Promise<ArrayOfNftForTokensQuote>;
  tokensForNfts: ({
    collection,
    denom,
    filterSources,
    limit
  }: {
    collection: string;
    denom: string;
    filterSources?: TokensForNftSource[];
    limit: number;
  }) => Promise<ArrayOfTokensForNftQuote>;
}
export class InfinityRouterQueryClient implements InfinityRouterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.nftsForTokens = this.nftsForTokens.bind(this);
    this.tokensForNfts = this.tokensForNfts.bind(this);
  }

  nftsForTokens = async ({
    collection,
    denom,
    filterSources,
    limit
  }: {
    collection: string;
    denom: string;
    filterSources?: NftForTokensSource[];
    limit: number;
  }): Promise<ArrayOfNftForTokensQuote> => {
    return this.client.queryContractSmart(this.contractAddress, {
      nfts_for_tokens: {
        collection,
        denom,
        filter_sources: filterSources,
        limit
      }
    });
  };
  tokensForNfts = async ({
    collection,
    denom,
    filterSources,
    limit
  }: {
    collection: string;
    denom: string;
    filterSources?: TokensForNftSource[];
    limit: number;
  }): Promise<ArrayOfTokensForNftQuote> => {
    return this.client.queryContractSmart(this.contractAddress, {
      tokens_for_nfts: {
        collection,
        denom,
        filter_sources: filterSources,
        limit
      }
    });
  };
}
export interface InfinityRouterInterface extends InfinityRouterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  swapNftsForTokens: ({
    collection,
    denom,
    filterSources,
    sellOrders,
    swapParams
  }: {
    collection: string;
    denom: string;
    filterSources?: NftForTokensSource[];
    sellOrders: SellOrder[];
    swapParams?: SwapParamsForString;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  swapTokensForNfts: ({
    collection,
    denom,
    filterSources,
    maxInputs,
    swapParams
  }: {
    collection: string;
    denom: string;
    filterSources?: TokensForNftSource[];
    maxInputs: Uint128[];
    swapParams?: SwapParamsForString;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class InfinityRouterClient extends InfinityRouterQueryClient implements InfinityRouterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.swapNftsForTokens = this.swapNftsForTokens.bind(this);
    this.swapTokensForNfts = this.swapTokensForNfts.bind(this);
  }

  swapNftsForTokens = async ({
    collection,
    denom,
    filterSources,
    sellOrders,
    swapParams
  }: {
    collection: string;
    denom: string;
    filterSources?: NftForTokensSource[];
    sellOrders: SellOrder[];
    swapParams?: SwapParamsForString;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      swap_nfts_for_tokens: {
        collection,
        denom,
        filter_sources: filterSources,
        sell_orders: sellOrders,
        swap_params: swapParams
      }
    }, fee, memo, _funds);
  };
  swapTokensForNfts = async ({
    collection,
    denom,
    filterSources,
    maxInputs,
    swapParams
  }: {
    collection: string;
    denom: string;
    filterSources?: TokensForNftSource[];
    maxInputs: Uint128[];
    swapParams?: SwapParamsForString;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      swap_tokens_for_nfts: {
        collection,
        denom,
        filter_sources: filterSources,
        max_inputs: maxInputs,
        swap_params: swapParams
      }
    }, fee, memo, _funds);
  };
}