/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Uint128, Decimal, InstantiateMsg, PriceRange, SudoParamsForString, Coin, ExecuteMsg, Timestamp, Uint64, UpdateValForString, UpdateValForExpirationInfo, UpdateValForDecimal, OrderOptionsForString, ExpirationInfo, QueryMsg, QueryBoundForString, QueryBoundForAsksByCollectionOffset, QueryBoundForAsksByPriceOffset, QueryBoundForAsksByCreatorOffset, QueryBoundForAsksByExpirationOffset, QueryBoundForOffersByCollectionOffset, QueryBoundForOffersByTokenPriceOffset, QueryBoundForOffersByCreatorOffset, QueryBoundForOffersByExpirationOffset, QueryBoundForCollectionOffersByCollectionOffset, QueryBoundForCollectionOffersByPriceOffset, QueryBoundForCollectionOffersByCreatorOffset, QueryBoundForCollectionOffersByExpirationOffset, QueryOptionsForString, QueryOptionsForAsksByCollectionOffset, AsksByCollectionOffset, QueryOptionsForAsksByPriceOffset, AsksByPriceOffset, QueryOptionsForAsksByCreatorOffset, AsksByCreatorOffset, QueryOptionsForAsksByExpirationOffset, AsksByExpirationOffset, QueryOptionsForOffersByCollectionOffset, OffersByCollectionOffset, QueryOptionsForOffersByTokenPriceOffset, OffersByTokenPriceOffset, QueryOptionsForOffersByCreatorOffset, OffersByCreatorOffset, QueryOptionsForOffersByExpirationOffset, OffersByExpirationOffset, QueryOptionsForCollectionOffersByCollectionOffset, CollectionOffersByCollectionOffset, QueryOptionsForCollectionOffersByPriceOffset, CollectionOffersByPriceOffset, QueryOptionsForCollectionOffersByCreatorOffset, CollectionOffersByCreatorOffset, QueryOptionsForCollectionOffersByExpirationOffset, CollectionOffersByExpirationOffset, NullableAsk, Addr, Ask, OrderInfo, ArrayOfAsk, NullableCollectionOffer, CollectionOffer, ArrayOfOffer, Offer, ArrayOfCollectionOffer, ArrayOfTupleOfStringAndPriceRange, SudoParamsForAddr } from "./MarketplaceV2.types";
export interface MarketplaceV2Message {
  contractAddress: string;
  sender: string;
  setAsk: ({
    collection,
    orderOptions,
    price,
    tokenId
  }: {
    collection: string;
    orderOptions?: OrderOptionsForString;
    price: Coin;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateAsk: ({
    assetRecipient,
    collection,
    expirationInfo,
    findersFeePercent,
    tokenId
  }: {
    assetRecipient?: UpdateValForString;
    collection: string;
    expirationInfo?: UpdateValForExpirationInfo;
    findersFeePercent?: UpdateValForDecimal;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptAsk: ({
    collection,
    orderOptions,
    tokenId
  }: {
    collection: string;
    orderOptions?: OrderOptionsForString;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeAsk: ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeExpiredAsk: ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setOffer: ({
    collection,
    orderOptions,
    price,
    tokenId
  }: {
    collection: string;
    orderOptions?: OrderOptionsForString;
    price: Coin;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateOffer: ({
    assetRecipient,
    collection,
    expirationInfo,
    findersFeePercent,
    tokenId
  }: {
    assetRecipient?: UpdateValForString;
    collection: string;
    expirationInfo?: UpdateValForExpirationInfo;
    findersFeePercent?: UpdateValForDecimal;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptOffer: ({
    collection,
    creator,
    orderOptions,
    tokenId
  }: {
    collection: string;
    creator: string;
    orderOptions?: OrderOptionsForString;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeOffer: ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  rejectOffer: ({
    collection,
    creator,
    tokenId
  }: {
    collection: string;
    creator: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeExpiredOffer: ({
    collection,
    creator,
    tokenId
  }: {
    collection: string;
    creator: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setCollectionOffer: ({
    collection,
    orderOptions,
    price
  }: {
    collection: string;
    orderOptions?: OrderOptionsForString;
    price: Coin;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateCollectionOffer: ({
    assetRecipient,
    collection,
    expirationInfo,
    findersFeePercent
  }: {
    assetRecipient?: UpdateValForString;
    collection: string;
    expirationInfo?: UpdateValForExpirationInfo;
    findersFeePercent?: UpdateValForDecimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptCollectionOffer: ({
    collection,
    creator,
    orderOptions,
    tokenId
  }: {
    collection: string;
    creator: string;
    orderOptions?: OrderOptionsForString;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeCollectionOffer: ({
    collection
  }: {
    collection: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeExpiredCollectionOffer: ({
    collection,
    creator
  }: {
    collection: string;
    creator: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class MarketplaceV2MessageComposer implements MarketplaceV2Message {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setAsk = this.setAsk.bind(this);
    this.updateAsk = this.updateAsk.bind(this);
    this.acceptAsk = this.acceptAsk.bind(this);
    this.removeAsk = this.removeAsk.bind(this);
    this.removeExpiredAsk = this.removeExpiredAsk.bind(this);
    this.setOffer = this.setOffer.bind(this);
    this.updateOffer = this.updateOffer.bind(this);
    this.acceptOffer = this.acceptOffer.bind(this);
    this.removeOffer = this.removeOffer.bind(this);
    this.rejectOffer = this.rejectOffer.bind(this);
    this.removeExpiredOffer = this.removeExpiredOffer.bind(this);
    this.setCollectionOffer = this.setCollectionOffer.bind(this);
    this.updateCollectionOffer = this.updateCollectionOffer.bind(this);
    this.acceptCollectionOffer = this.acceptCollectionOffer.bind(this);
    this.removeCollectionOffer = this.removeCollectionOffer.bind(this);
    this.removeExpiredCollectionOffer = this.removeExpiredCollectionOffer.bind(this);
  }

  setAsk = ({
    collection,
    orderOptions,
    price,
    tokenId
  }: {
    collection: string;
    orderOptions?: OrderOptionsForString;
    price: Coin;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_ask: {
            collection,
            order_options: orderOptions,
            price,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  updateAsk = ({
    assetRecipient,
    collection,
    expirationInfo,
    findersFeePercent,
    tokenId
  }: {
    assetRecipient?: UpdateValForString;
    collection: string;
    expirationInfo?: UpdateValForExpirationInfo;
    findersFeePercent?: UpdateValForDecimal;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_ask: {
            asset_recipient: assetRecipient,
            collection,
            expiration_info: expirationInfo,
            finders_fee_percent: findersFeePercent,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  acceptAsk = ({
    collection,
    orderOptions,
    tokenId
  }: {
    collection: string;
    orderOptions?: OrderOptionsForString;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_ask: {
            collection,
            order_options: orderOptions,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  removeAsk = ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_ask: {
            collection,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  removeExpiredAsk = ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_expired_ask: {
            collection,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  setOffer = ({
    collection,
    orderOptions,
    price,
    tokenId
  }: {
    collection: string;
    orderOptions?: OrderOptionsForString;
    price: Coin;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_offer: {
            collection,
            order_options: orderOptions,
            price,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  updateOffer = ({
    assetRecipient,
    collection,
    expirationInfo,
    findersFeePercent,
    tokenId
  }: {
    assetRecipient?: UpdateValForString;
    collection: string;
    expirationInfo?: UpdateValForExpirationInfo;
    findersFeePercent?: UpdateValForDecimal;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_offer: {
            asset_recipient: assetRecipient,
            collection,
            expiration_info: expirationInfo,
            finders_fee_percent: findersFeePercent,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  acceptOffer = ({
    collection,
    creator,
    orderOptions,
    tokenId
  }: {
    collection: string;
    creator: string;
    orderOptions?: OrderOptionsForString;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_offer: {
            collection,
            creator,
            order_options: orderOptions,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  removeOffer = ({
    collection,
    tokenId
  }: {
    collection: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_offer: {
            collection,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  rejectOffer = ({
    collection,
    creator,
    tokenId
  }: {
    collection: string;
    creator: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          reject_offer: {
            collection,
            creator,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  removeExpiredOffer = ({
    collection,
    creator,
    tokenId
  }: {
    collection: string;
    creator: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_expired_offer: {
            collection,
            creator,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  setCollectionOffer = ({
    collection,
    orderOptions,
    price
  }: {
    collection: string;
    orderOptions?: OrderOptionsForString;
    price: Coin;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_collection_offer: {
            collection,
            order_options: orderOptions,
            price
          }
        })),
        funds: _funds
      })
    };
  };
  updateCollectionOffer = ({
    assetRecipient,
    collection,
    expirationInfo,
    findersFeePercent
  }: {
    assetRecipient?: UpdateValForString;
    collection: string;
    expirationInfo?: UpdateValForExpirationInfo;
    findersFeePercent?: UpdateValForDecimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_collection_offer: {
            asset_recipient: assetRecipient,
            collection,
            expiration_info: expirationInfo,
            finders_fee_percent: findersFeePercent
          }
        })),
        funds: _funds
      })
    };
  };
  acceptCollectionOffer = ({
    collection,
    creator,
    orderOptions,
    tokenId
  }: {
    collection: string;
    creator: string;
    orderOptions?: OrderOptionsForString;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_collection_offer: {
            collection,
            creator,
            order_options: orderOptions,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  removeCollectionOffer = ({
    collection
  }: {
    collection: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_collection_offer: {
            collection
          }
        })),
        funds: _funds
      })
    };
  };
  removeExpiredCollectionOffer = ({
    collection,
    creator
  }: {
    collection: string;
    creator: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_expired_collection_offer: {
            collection,
            creator
          }
        })),
        funds: _funds
      })
    };
  };
}