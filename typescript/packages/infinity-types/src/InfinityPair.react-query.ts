/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { BondingCurve, Uint128, Decimal, PairType, InstantiateMsg, PairConfigForString, PairImmutableForString, ExecuteMsg, Binary, Cw721ReceiveMsg, Coin, QueryMsg, QueryBoundForString, QueryOptionsForString, Addr, NftDepositsResponse, Pair, PairConfigForAddr, PairImmutableForAddr, PairInternal, QuoteSummary, TokenPayment } from "./InfinityPair.types";
import { InfinityPairQueryClient } from "./InfinityPair.client";
export const infinityPairQueryKeys = {
  contract: ([{
    contract: "infinityPair"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...infinityPairQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  pair: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...infinityPairQueryKeys.address(contractAddress)[0],
    method: "pair",
    args
  }] as const),
  nftDeposits: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...infinityPairQueryKeys.address(contractAddress)[0],
    method: "nft_deposits",
    args
  }] as const)
};
export const infinityPairQueries = {
  pair: <TData = Pair,>({
    client,
    options
  }: InfinityPairPairQuery<TData>): UseQueryOptions<Pair, Error, TData> => ({
    queryKey: infinityPairQueryKeys.pair(client?.contractAddress),
    queryFn: () => client ? client.pair() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  nftDeposits: <TData = NftDepositsResponse,>({
    client,
    args,
    options
  }: InfinityPairNftDepositsQuery<TData>): UseQueryOptions<NftDepositsResponse, Error, TData> => ({
    queryKey: infinityPairQueryKeys.nftDeposits(client?.contractAddress, args),
    queryFn: () => client ? client.nftDeposits({
      queryOptions: args.queryOptions
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface InfinityPairReactQuery<TResponse, TData = TResponse> {
  client: InfinityPairQueryClient | undefined;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface InfinityPairNftDepositsQuery<TData> extends InfinityPairReactQuery<NftDepositsResponse, TData> {
  args: {
    queryOptions?: QueryOptionsForString;
  };
}
export function useInfinityPairNftDepositsQuery<TData = NftDepositsResponse>({
  client,
  args,
  options
}: InfinityPairNftDepositsQuery<TData>) {
  return useQuery<NftDepositsResponse, Error, TData>(infinityPairQueryKeys.nftDeposits(client?.contractAddress, args), () => client ? client.nftDeposits({
    queryOptions: args.queryOptions
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfinityPairPairQuery<TData> extends InfinityPairReactQuery<Pair, TData> {}
export function useInfinityPairPairQuery<TData = Pair>({
  client,
  options
}: InfinityPairPairQuery<TData>) {
  return useQuery<Pair, Error, TData>(infinityPairQueryKeys.pair(client?.contractAddress), () => client ? client.pair() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}