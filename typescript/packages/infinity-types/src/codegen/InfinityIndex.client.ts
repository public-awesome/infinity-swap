/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, QueryBoundForPairQuoteOffset, QueryOptionsForPairQuoteOffset, PairQuoteOffset, Addr, ArrayOfPairQuote, PairQuote, Coin } from "./InfinityIndex.types";
export interface InfinityIndexReadOnlyInterface {
  contractAddress: string;
  sellToPairQuotes: ({
    collection,
    denom,
    queryOptions
  }: {
    collection: string;
    denom: string;
    queryOptions?: QueryOptionsForPairQuoteOffset;
  }) => Promise<ArrayOfPairQuote>;
  buyFromPairQuotes: ({
    collection,
    denom,
    queryOptions
  }: {
    collection: string;
    denom: string;
    queryOptions?: QueryOptionsForPairQuoteOffset;
  }) => Promise<ArrayOfPairQuote>;
}
export class InfinityIndexQueryClient implements InfinityIndexReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.sellToPairQuotes = this.sellToPairQuotes.bind(this);
    this.buyFromPairQuotes = this.buyFromPairQuotes.bind(this);
  }

  sellToPairQuotes = async ({
    collection,
    denom,
    queryOptions
  }: {
    collection: string;
    denom: string;
    queryOptions?: QueryOptionsForPairQuoteOffset;
  }): Promise<ArrayOfPairQuote> => {
    return this.client.queryContractSmart(this.contractAddress, {
      sell_to_pair_quotes: {
        collection,
        denom,
        query_options: queryOptions
      }
    });
  };
  buyFromPairQuotes = async ({
    collection,
    denom,
    queryOptions
  }: {
    collection: string;
    denom: string;
    queryOptions?: QueryOptionsForPairQuoteOffset;
  }): Promise<ArrayOfPairQuote> => {
    return this.client.queryContractSmart(this.contractAddress, {
      buy_from_pair_quotes: {
        collection,
        denom,
        query_options: queryOptions
      }
    });
  };
}
export interface InfinityIndexInterface extends InfinityIndexReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updatePairIndices: ({
    buyFromPairQuote,
    collection,
    denom,
    sellToPairQuote
  }: {
    buyFromPairQuote?: Uint128;
    collection: string;
    denom: string;
    sellToPairQuote?: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class InfinityIndexClient extends InfinityIndexQueryClient implements InfinityIndexInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updatePairIndices = this.updatePairIndices.bind(this);
  }

  updatePairIndices = async ({
    buyFromPairQuote,
    collection,
    denom,
    sellToPairQuote
  }: {
    buyFromPairQuote?: Uint128;
    collection: string;
    denom: string;
    sellToPairQuote?: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_pair_indices: {
        buy_from_pair_quote: buyFromPairQuote,
        collection,
        denom,
        sell_to_pair_quote: sellToPairQuote
      }
    }, fee, memo, _funds);
  };
}