/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { BondingCurve, Uint128, Decimal, PairType, InstantiateMsg, PairConfigForString, PairImmutableForString, ExecuteMsg, Binary, Cw721ReceiveMsg, Coin, QueryMsg, QueryBoundForString, QueryOptionsForString, QuotesResponse, Addr, NftDepositsResponse, Pair, PairConfigForAddr, PairImmutableForAddr, PairInternal, QuoteSummary, TokenPayment } from "./InfinityPair.types";
export interface InfinityPairReadOnlyInterface {
  contractAddress: string;
  pair: () => Promise<Pair>;
  nftDeposits: ({
    queryOptions
  }: {
    queryOptions?: QueryOptionsForString;
  }) => Promise<NftDepositsResponse>;
  sellToPairQuotes: ({
    limit
  }: {
    limit: number;
  }) => Promise<QuotesResponse>;
  buyFromPairQuotes: ({
    limit
  }: {
    limit: number;
  }) => Promise<QuotesResponse>;
}
export class InfinityPairQueryClient implements InfinityPairReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.pair = this.pair.bind(this);
    this.nftDeposits = this.nftDeposits.bind(this);
    this.sellToPairQuotes = this.sellToPairQuotes.bind(this);
    this.buyFromPairQuotes = this.buyFromPairQuotes.bind(this);
  }

  pair = async (): Promise<Pair> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pair: {}
    });
  };
  nftDeposits = async ({
    queryOptions
  }: {
    queryOptions?: QueryOptionsForString;
  }): Promise<NftDepositsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      nft_deposits: {
        query_options: queryOptions
      }
    });
  };
  sellToPairQuotes = async ({
    limit
  }: {
    limit: number;
  }): Promise<QuotesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      sell_to_pair_quotes: {
        limit
      }
    });
  };
  buyFromPairQuotes = async ({
    limit
  }: {
    limit: number;
  }): Promise<QuotesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      buy_from_pair_quotes: {
        limit
      }
    });
  };
}
export interface InfinityPairInterface extends InfinityPairReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receiveNft: ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawNfts: ({
    assetRecipient,
    collection,
    tokenIds
  }: {
    assetRecipient?: string;
    collection: string;
    tokenIds: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawAnyNfts: ({
    assetRecipient,
    collection,
    limit
  }: {
    assetRecipient?: string;
    collection: string;
    limit: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  depositTokens: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawTokens: ({
    assetRecipient,
    funds
  }: {
    assetRecipient?: string;
    funds: Coin[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawAllTokens: ({
    assetRecipient
  }: {
    assetRecipient?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updatePairConfig: ({
    assetRecipient,
    bondingCurve,
    isActive,
    pairType
  }: {
    assetRecipient?: string;
    bondingCurve?: BondingCurve;
    isActive?: boolean;
    pairType?: PairType;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  swapNftForTokens: ({
    assetRecipient,
    minOutput,
    tokenId
  }: {
    assetRecipient?: string;
    minOutput: Coin;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  swapTokensForSpecificNft: ({
    assetRecipient,
    tokenId
  }: {
    assetRecipient?: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  swapTokensForAnyNft: ({
    assetRecipient
  }: {
    assetRecipient?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class InfinityPairClient extends InfinityPairQueryClient implements InfinityPairInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receiveNft = this.receiveNft.bind(this);
    this.withdrawNfts = this.withdrawNfts.bind(this);
    this.withdrawAnyNfts = this.withdrawAnyNfts.bind(this);
    this.depositTokens = this.depositTokens.bind(this);
    this.withdrawTokens = this.withdrawTokens.bind(this);
    this.withdrawAllTokens = this.withdrawAllTokens.bind(this);
    this.updatePairConfig = this.updatePairConfig.bind(this);
    this.swapNftForTokens = this.swapNftForTokens.bind(this);
    this.swapTokensForSpecificNft = this.swapTokensForSpecificNft.bind(this);
    this.swapTokensForAnyNft = this.swapTokensForAnyNft.bind(this);
  }

  receiveNft = async ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_nft: {
        msg,
        sender,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  withdrawNfts = async ({
    assetRecipient,
    collection,
    tokenIds
  }: {
    assetRecipient?: string;
    collection: string;
    tokenIds: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_nfts: {
        asset_recipient: assetRecipient,
        collection,
        token_ids: tokenIds
      }
    }, fee, memo, _funds);
  };
  withdrawAnyNfts = async ({
    assetRecipient,
    collection,
    limit
  }: {
    assetRecipient?: string;
    collection: string;
    limit: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_any_nfts: {
        asset_recipient: assetRecipient,
        collection,
        limit
      }
    }, fee, memo, _funds);
  };
  depositTokens = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit_tokens: {}
    }, fee, memo, _funds);
  };
  withdrawTokens = async ({
    assetRecipient,
    funds
  }: {
    assetRecipient?: string;
    funds: Coin[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_tokens: {
        asset_recipient: assetRecipient,
        funds
      }
    }, fee, memo, _funds);
  };
  withdrawAllTokens = async ({
    assetRecipient
  }: {
    assetRecipient?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_all_tokens: {
        asset_recipient: assetRecipient
      }
    }, fee, memo, _funds);
  };
  updatePairConfig = async ({
    assetRecipient,
    bondingCurve,
    isActive,
    pairType
  }: {
    assetRecipient?: string;
    bondingCurve?: BondingCurve;
    isActive?: boolean;
    pairType?: PairType;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_pair_config: {
        asset_recipient: assetRecipient,
        bonding_curve: bondingCurve,
        is_active: isActive,
        pair_type: pairType
      }
    }, fee, memo, _funds);
  };
  swapNftForTokens = async ({
    assetRecipient,
    minOutput,
    tokenId
  }: {
    assetRecipient?: string;
    minOutput: Coin;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      swap_nft_for_tokens: {
        asset_recipient: assetRecipient,
        min_output: minOutput,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  swapTokensForSpecificNft = async ({
    assetRecipient,
    tokenId
  }: {
    assetRecipient?: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      swap_tokens_for_specific_nft: {
        asset_recipient: assetRecipient,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  swapTokensForAnyNft = async ({
    assetRecipient
  }: {
    assetRecipient?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      swap_tokens_for_any_nft: {
        asset_recipient: assetRecipient
      }
    }, fee, memo, _funds);
  };
}