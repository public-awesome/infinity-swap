/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {
  infinity_global: string;
}
export type ExecuteMsg = {
  create_pair: {
    pair_config: PairConfigForString;
    pair_immutable: PairImmutableForString;
  };
} | {
  create_pair2: {
    pair_config: PairConfigForString;
    pair_immutable: PairImmutableForString;
  };
};
export type BondingCurve = "constant_product" | {
  linear: {
    delta: Uint128;
    spot_price: Uint128;
  };
} | {
  exponential: {
    delta: Decimal;
    spot_price: Uint128;
  };
};
export type Uint128 = string;
export type Decimal = string;
export type PairType = ("token" | "nft") | {
  trade: {
    reinvest_nfts: boolean;
    reinvest_tokens: boolean;
    swap_fee_percent: Decimal;
  };
};
export interface PairConfigForString {
  asset_recipient?: string | null;
  bonding_curve: BondingCurve;
  is_active: boolean;
  pair_type: PairType;
}
export interface PairImmutableForString {
  collection: string;
  denom: string;
  owner: string;
}
export type QueryMsg = {
  next_pair: {
    sender: string;
  };
} | {
  pairs_by_owner: {
    code_id: number;
    owner: string;
    query_options?: QueryOptionsForUint64 | null;
  };
} | {
  sim_sell_to_pair_quotes: {
    limit: number;
    pair: Pair;
  };
} | {
  sim_buy_from_pair_quotes: {
    limit: number;
    pair: Pair;
  };
};
export type QueryBoundForUint64 = {
  inclusive: number;
} | {
  exclusive: number;
};
export type Addr = string;
export interface QueryOptionsForUint64 {
  descending?: boolean | null;
  limit?: number | null;
  max?: QueryBoundForUint64 | null;
  min?: QueryBoundForUint64 | null;
}
export interface Pair {
  config: PairConfigForAddr;
  immutable: PairImmutableForAddr;
  internal: PairInternal;
  total_tokens: Uint128;
}
export interface PairConfigForAddr {
  asset_recipient?: Addr | null;
  bonding_curve: BondingCurve;
  is_active: boolean;
  pair_type: PairType;
}
export interface PairImmutableForAddr {
  collection: Addr;
  denom: string;
  owner: Addr;
}
export interface PairInternal {
  buy_from_pair_quote_summary?: QuoteSummary | null;
  sell_to_pair_quote_summary?: QuoteSummary | null;
  total_nfts: number;
}
export interface QuoteSummary {
  fair_burn: TokenPayment;
  royalty?: TokenPayment | null;
  seller_amount: Uint128;
  swap?: TokenPayment | null;
}
export interface TokenPayment {
  amount: Uint128;
  recipient: Addr;
}
export type Binary = string;
export interface NextPairResponse {
  code_id: number;
  counter: number;
  pair: Addr;
  salt: Binary;
  sender: Addr;
}
export type ArrayOfTupleOfUint64AndAddr = [number, Addr][];
export interface QuotesResponse {
  denom: string;
  quotes: Uint128[];
}