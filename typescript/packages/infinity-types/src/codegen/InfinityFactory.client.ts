/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, BondingCurve, Uint128, Decimal, PairType, PairConfigForString, PairImmutableForString, QueryMsg, QueryBoundForUint64, QueryOptionsForUint64, Addr, Binary, NextPairResponse, ArrayOfTupleOfUint64AndAddr } from "./InfinityFactory.types";
export interface InfinityFactoryReadOnlyInterface {
  contractAddress: string;
  nextPair: ({
    sender
  }: {
    sender: string;
  }) => Promise<NextPairResponse>;
  pairsByOwner: ({
    owner,
    queryOptions
  }: {
    owner: string;
    queryOptions?: QueryOptions_for_uint64;
  }) => Promise<ArrayOfTupleOfUint64AndAddr>;
}
export class InfinityFactoryQueryClient implements InfinityFactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.nextPair = this.nextPair.bind(this);
    this.pairsByOwner = this.pairsByOwner.bind(this);
  }

  nextPair = async ({
    sender
  }: {
    sender: string;
  }): Promise<NextPairResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      next_pair: {
        sender
      }
    });
  };
  pairsByOwner = async ({
    owner,
    queryOptions
  }: {
    owner: string;
    queryOptions?: QueryOptions_for_uint64;
  }): Promise<ArrayOfTupleOfUint64AndAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pairs_by_owner: {
        owner,
        query_options: queryOptions
      }
    });
  };
}
export interface InfinityFactoryInterface extends InfinityFactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createPair: ({
    pairConfig,
    pairImmutable
  }: {
    pairConfig: PairConfigForString;
    pairImmutable: PairImmutableForString;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  createPair2: ({
    pairConfig,
    pairImmutable
  }: {
    pairConfig: PairConfigForString;
    pairImmutable: PairImmutableForString;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class InfinityFactoryClient extends InfinityFactoryQueryClient implements InfinityFactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createPair = this.createPair.bind(this);
    this.createPair2 = this.createPair2.bind(this);
  }

  createPair = async ({
    pairConfig,
    pairImmutable
  }: {
    pairConfig: PairConfigForString;
    pairImmutable: PairImmutableForString;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_pair: {
        pair_config: pairConfig,
        pair_immutable: pairImmutable
      }
    }, fee, memo, _funds);
  };
  createPair2 = async ({
    pairConfig,
    pairImmutable
  }: {
    pairConfig: PairConfigForString;
    pairImmutable: PairImmutableForString;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_pair2: {
        pair_config: pairConfig,
        pair_immutable: pairImmutable
      }
    }, fee, memo, _funds);
  };
}