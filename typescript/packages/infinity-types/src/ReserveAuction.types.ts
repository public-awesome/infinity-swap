/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export type Decimal = string;
export interface InstantiateMsg {
  create_auction_fee: Coin;
  extend_duration: number;
  fair_burn: string;
  halt_buffer_duration: number;
  halt_duration_threshold: number;
  halt_postpone_duration: number;
  max_auctions_to_settle_per_block: number;
  max_duration: number;
  min_bid_increment_percent: Decimal;
  min_duration: number;
  min_reserve_prices: Coin[];
  trading_fee_percent: Decimal;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  create_auction: {
    collection: string;
    duration: number;
    reserve_price: Coin;
    seller_funds_recipient?: string | null;
    token_id: string;
  };
} | {
  update_reserve_price: {
    collection: string;
    reserve_price: Coin;
    token_id: string;
  };
} | {
  cancel_auction: {
    collection: string;
    token_id: string;
  };
} | {
  place_bid: {
    collection: string;
    token_id: string;
  };
} | {
  settle_auction: {
    collection: string;
    token_id: string;
  };
};
export type QueryMsg = {
  config: {};
} | {
  halt_manager: {};
} | {
  min_reserve_prices: {
    query_options?: QueryOptionsForMinReservePriceOffset | null;
  };
} | {
  auction: {
    collection: string;
    token_id: string;
  };
} | {
  auctions_by_seller: {
    query_options?: QueryOptionsForAuctionKeyOffset | null;
    seller: string;
  };
} | {
  auctions_by_end_time: {
    end_time: number;
    query_options?: QueryOptionsForAuctionKeyOffset | null;
  };
};
export interface QueryOptionsForMinReservePriceOffset {
  descending?: boolean | null;
  limit?: number | null;
  start_after?: MinReservePriceOffset | null;
}
export interface MinReservePriceOffset {
  denom: string;
}
export interface QueryOptionsForAuctionKeyOffset {
  descending?: boolean | null;
  limit?: number | null;
  start_after?: AuctionKeyOffset | null;
}
export interface AuctionKeyOffset {
  collection: string;
  token_id: string;
}
export type NullableAuction = Auction | null;
export type Addr = string;
export type Timestamp = Uint64;
export type Uint64 = string;
export interface Auction {
  collection: Addr;
  duration: number;
  end_time?: Timestamp | null;
  first_bid_time?: Timestamp | null;
  high_bid?: HighBid | null;
  reserve_price: Coin;
  seller: Addr;
  seller_funds_recipient?: Addr | null;
  token_id: string;
}
export interface HighBid {
  bidder: Addr;
  coin: Coin;
}
export type ArrayOfAuction = Auction[];
export interface Config {
  create_auction_fee: Coin;
  extend_duration: number;
  fair_burn: Addr;
  halt_buffer_duration: number;
  halt_duration_threshold: number;
  halt_postpone_duration: number;
  max_auctions_to_settle_per_block: number;
  max_duration: number;
  min_bid_increment_percent: Decimal;
  min_duration: number;
  trading_fee_percent: Decimal;
}
export interface HaltManager {
  halt_windows: HaltWindow[];
  prev_block_time: number;
}
export interface HaltWindow {
  end_time: number;
  start_time: number;
}
export type ArrayOfCoin = Coin[];