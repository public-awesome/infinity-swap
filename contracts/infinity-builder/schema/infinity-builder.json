{
  "contract_name": "infinity-builder",
  "contract_version": "0.1.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "code_ids",
      "default_royalty_fee_percent",
      "fair_burn",
      "fair_burn_fee_percent",
      "marketplace",
      "max_royalty_fee_percent",
      "max_swap_fee_percent",
      "min_prices",
      "pair_creation_fee",
      "royalty_registry"
    ],
    "properties": {
      "admin": {
        "type": [
          "string",
          "null"
        ]
      },
      "code_ids": {
        "$ref": "#/definitions/CodeIds"
      },
      "default_royalty_fee_percent": {
        "$ref": "#/definitions/Decimal"
      },
      "fair_burn": {
        "type": "string"
      },
      "fair_burn_fee_percent": {
        "$ref": "#/definitions/Decimal"
      },
      "marketplace": {
        "type": "string"
      },
      "max_royalty_fee_percent": {
        "$ref": "#/definitions/Decimal"
      },
      "max_swap_fee_percent": {
        "$ref": "#/definitions/Decimal"
      },
      "min_prices": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Coin"
        }
      },
      "pair_creation_fee": {
        "$ref": "#/definitions/Coin"
      },
      "royalty_registry": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "CodeIds": {
        "type": "object",
        "required": [
          "infinity_factory",
          "infinity_global",
          "infinity_index",
          "infinity_pair",
          "infinity_router"
        ],
        "properties": {
          "infinity_factory": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "infinity_global": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "infinity_index": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "infinity_pair": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "infinity_router": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object"
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "type": "string",
    "enum": []
  },
  "migrate": null,
  "sudo": null,
  "responses": {}
}
