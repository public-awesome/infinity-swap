{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PoolsResponse",
  "type": "object",
  "required": [
    "pools"
  ],
  "properties": {
    "pools": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Pool"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "BondingCurve": {
      "description": "BondingCurve refers to the curve used to calculate the spot price for the pool * Linear: A linear curve that increments by a constant amount (delta) * Exponential: An exponential curve that increments by a percentage amount (delta) * ConstantProduct: A constant product curve that maintains a constant product of the two assets",
      "type": "string",
      "enum": [
        "linear",
        "exponential",
        "constant_product"
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Pool": {
      "description": "Pool represents a pool of assets that can be swapped",
      "type": "object",
      "required": [
        "bonding_curve",
        "collection",
        "delta",
        "finders_fee_percent",
        "id",
        "is_active",
        "owner",
        "pool_type",
        "reinvest_nfts",
        "reinvest_tokens",
        "spot_price",
        "swap_fee_percent",
        "total_nfts",
        "total_tokens"
      ],
      "properties": {
        "asset_recipient": {
          "description": "The address of the recipient of assets traded into the pool",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "bonding_curve": {
          "description": "The bonding curve used to calculate the spot price",
          "allOf": [
            {
              "$ref": "#/definitions/BondingCurve"
            }
          ]
        },
        "collection": {
          "description": "The address of the NFT collection contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "delta": {
          "description": "The amount by which the spot price will increment/decrement For linear curves, this is the constant amount For exponential curves, this is the percentage amount (treated as basis points)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "finders_fee_percent": {
          "description": "The percentage of the swap that will be paid to the finder of a trade",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "id": {
          "description": "The unique id of the pool",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "is_active": {
          "description": "Whether or not the pool is accepting trades",
          "type": "boolean"
        },
        "owner": {
          "description": "The address of the pool owner",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "pool_type": {
          "description": "The type of assets held by the pool",
          "allOf": [
            {
              "$ref": "#/definitions/PoolType"
            }
          ]
        },
        "reinvest_nfts": {
          "description": "Whether or not the NFTs sold into the pool will be reinvested",
          "type": "boolean"
        },
        "reinvest_tokens": {
          "description": "Whether or not the tokens sold into the pool will be reinvested",
          "type": "boolean"
        },
        "spot_price": {
          "description": "A moving value used to derive the price at which the pool will trade assets Note: this value is not necessarily the final sale price for pool assets",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "swap_fee_percent": {
          "description": "The percentage of the swap that will be paid to the pool owner Note: this only applies to Trade pools",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "total_nfts": {
          "description": "The total number of NFTs held by the pool",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "total_tokens": {
          "description": "The total amount of tokens held by the pool",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PoolType": {
      "description": "PoolType refers to the assets held by the pool * Token: A pool that holds fungible tokens * Nft: A pool that holds NFTs * Trade: A pool that holds both fungible tokens and NFTs",
      "type": "string",
      "enum": [
        "token",
        "nft",
        "trade"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
