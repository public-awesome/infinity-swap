{
  "contract_name": "infinity-pair",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "infinity_global",
      "pair_config",
      "pair_immutable"
    ],
    "properties": {
      "infinity_global": {
        "description": "The address of the infinity global contract",
        "type": "string"
      },
      "pair_config": {
        "description": "The configuration object for the pair",
        "allOf": [
          {
            "$ref": "#/definitions/PairConfig_for_String"
          }
        ]
      },
      "pair_immutable": {
        "description": "The immutable parameters of the pair",
        "allOf": [
          {
            "$ref": "#/definitions/PairImmutable_for_String"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "BondingCurve": {
        "description": "BondingCurve refers to the curve used to calculate the spot price for the pair * Linear: A linear curve that increments by a constant amount (delta) * Exponential: An exponential curve that increments by a percentage amount (delta) * ConstantProduct: A constant product curve that maintains a constant product of the two assets",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "constant_product"
            ]
          },
          {
            "type": "object",
            "required": [
              "linear"
            ],
            "properties": {
              "linear": {
                "type": "object",
                "required": [
                  "delta",
                  "spot_price"
                ],
                "properties": {
                  "delta": {
                    "description": "The amount by which the spot price will increment/decrement For linear curves, this is the constant amount For exponential curves, this is the percentage amount (treated as basis points)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      }
                    ]
                  },
                  "spot_price": {
                    "description": "A moving value used to derive the price at which the pair will trade assets Note: this value is not necessarily the final sale price for pair assets",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "exponential"
            ],
            "properties": {
              "exponential": {
                "type": "object",
                "required": [
                  "delta",
                  "spot_price"
                ],
                "properties": {
                  "delta": {
                    "description": "The amount by which the spot price will increment/decrement For linear curves, this is the constant amount For exponential curves, this is the percentage amount (treated as basis points)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Decimal"
                      }
                    ]
                  },
                  "spot_price": {
                    "description": "A moving value used to derive the price at which the pair will trade assets Note: this value is not necessarily the final sale price for pair assets",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "PairConfig_for_String": {
        "description": "PairConfig represents the configuration parameters for a pair, set by the user",
        "type": "object",
        "required": [
          "bonding_curve",
          "is_active",
          "pair_type"
        ],
        "properties": {
          "asset_recipient": {
            "description": "The address of the recipient of assets traded into the pair",
            "type": [
              "string",
              "null"
            ]
          },
          "bonding_curve": {
            "description": "The bonding curve used to calculate the spot price",
            "allOf": [
              {
                "$ref": "#/definitions/BondingCurve"
              }
            ]
          },
          "is_active": {
            "description": "Whether or not the pair is accepting trades",
            "type": "boolean"
          },
          "pair_type": {
            "description": "The type of assets held by the pair",
            "allOf": [
              {
                "$ref": "#/definitions/PairType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "PairImmutable_for_String": {
        "type": "object",
        "required": [
          "collection",
          "denom",
          "owner"
        ],
        "properties": {
          "collection": {
            "description": "The address of the NFT collection contract",
            "type": "string"
          },
          "denom": {
            "description": "The denom of the tokens held by the pair",
            "type": "string"
          },
          "owner": {
            "description": "The address of the pair owner",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PairType": {
        "description": "PairType refers to the assets held by the pair * Token: A pair that holds fungible tokens * Nft: A pair that holds NFTs * Trade: A pair that holds both fungible tokens and NFTs",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "token",
              "nft"
            ]
          },
          {
            "type": "object",
            "required": [
              "trade"
            ],
            "properties": {
              "trade": {
                "type": "object",
                "required": [
                  "reinvest_nfts",
                  "reinvest_tokens",
                  "swap_fee_percent"
                ],
                "properties": {
                  "reinvest_nfts": {
                    "description": "Whether or not the NFTs sold into the pair will be reinvested",
                    "type": "boolean"
                  },
                  "reinvest_tokens": {
                    "description": "Whether or not the tokens sold into the pair will be reinvested",
                    "type": "boolean"
                  },
                  "swap_fee_percent": {
                    "description": "The percentage of the swap that will be paid to the pair owner Note: this only applies to Trade pairs",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Decimal"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Deposit NFTs into the pair",
        "type": "object",
        "required": [
          "receive_nft"
        ],
        "properties": {
          "receive_nft": {
            "$ref": "#/definitions/Cw721ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw NFTs from the pair",
        "type": "object",
        "required": [
          "withdraw_nfts"
        ],
        "properties": {
          "withdraw_nfts": {
            "type": "object",
            "required": [
              "token_ids"
            ],
            "properties": {
              "token_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw any NFTs, from the pair",
        "type": "object",
        "required": [
          "withdraw_any_nfts"
        ],
        "properties": {
          "withdraw_any_nfts": {
            "type": "object",
            "required": [
              "limit"
            ],
            "properties": {
              "limit": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Deposit tokens into the pair",
        "type": "object",
        "required": [
          "deposit_tokens"
        ],
        "properties": {
          "deposit_tokens": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw tokens from the pair",
        "type": "object",
        "required": [
          "withdraw_tokens"
        ],
        "properties": {
          "withdraw_tokens": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw all tokens from the pair",
        "type": "object",
        "required": [
          "withdraw_all_tokens"
        ],
        "properties": {
          "withdraw_all_tokens": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the parameters of a pair",
        "type": "object",
        "required": [
          "update_pair_config"
        ],
        "properties": {
          "update_pair_config": {
            "type": "object",
            "properties": {
              "asset_recipient": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "bonding_curve": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/BondingCurve"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "is_active": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "pair_type": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PairType"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "swap_nft_for_tokens"
        ],
        "properties": {
          "swap_nft_for_tokens": {
            "type": "object",
            "required": [
              "min_output",
              "token_id"
            ],
            "properties": {
              "asset_recipient": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "min_output": {
                "$ref": "#/definitions/Coin"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "swap_tokens_for_specific_nft"
        ],
        "properties": {
          "swap_tokens_for_specific_nft": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "asset_recipient": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "swap_tokens_for_any_nft"
        ],
        "properties": {
          "swap_tokens_for_any_nft": {
            "type": "object",
            "properties": {
              "asset_recipient": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "BondingCurve": {
        "description": "BondingCurve refers to the curve used to calculate the spot price for the pair * Linear: A linear curve that increments by a constant amount (delta) * Exponential: An exponential curve that increments by a percentage amount (delta) * ConstantProduct: A constant product curve that maintains a constant product of the two assets",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "constant_product"
            ]
          },
          {
            "type": "object",
            "required": [
              "linear"
            ],
            "properties": {
              "linear": {
                "type": "object",
                "required": [
                  "delta",
                  "spot_price"
                ],
                "properties": {
                  "delta": {
                    "description": "The amount by which the spot price will increment/decrement For linear curves, this is the constant amount For exponential curves, this is the percentage amount (treated as basis points)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      }
                    ]
                  },
                  "spot_price": {
                    "description": "A moving value used to derive the price at which the pair will trade assets Note: this value is not necessarily the final sale price for pair assets",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "exponential"
            ],
            "properties": {
              "exponential": {
                "type": "object",
                "required": [
                  "delta",
                  "spot_price"
                ],
                "properties": {
                  "delta": {
                    "description": "The amount by which the spot price will increment/decrement For linear curves, this is the constant amount For exponential curves, this is the percentage amount (treated as basis points)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Decimal"
                      }
                    ]
                  },
                  "spot_price": {
                    "description": "A moving value used to derive the price at which the pair will trade assets Note: this value is not necessarily the final sale price for pair assets",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Cw721ReceiveMsg": {
        "description": "Cw721ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "msg",
          "sender",
          "token_id"
        ],
        "properties": {
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "PairType": {
        "description": "PairType refers to the assets held by the pair * Token: A pair that holds fungible tokens * Nft: A pair that holds NFTs * Trade: A pair that holds both fungible tokens and NFTs",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "token",
              "nft"
            ]
          },
          {
            "type": "object",
            "required": [
              "trade"
            ],
            "properties": {
              "trade": {
                "type": "object",
                "required": [
                  "reinvest_nfts",
                  "reinvest_tokens",
                  "swap_fee_percent"
                ],
                "properties": {
                  "reinvest_nfts": {
                    "description": "Whether or not the NFTs sold into the pair will be reinvested",
                    "type": "boolean"
                  },
                  "reinvest_tokens": {
                    "description": "Whether or not the tokens sold into the pair will be reinvested",
                    "type": "boolean"
                  },
                  "swap_fee_percent": {
                    "description": "The percentage of the swap that will be paid to the pair owner Note: this only applies to Trade pairs",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Decimal"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "pair"
        ],
        "properties": {
          "pair": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "nft_deposits"
        ],
        "properties": {
          "nft_deposits": {
            "type": "object",
            "properties": {
              "query_options": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/QueryOptions_for_String"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "QueryBound_for_String": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "inclusive"
            ],
            "properties": {
              "inclusive": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "exclusive"
            ],
            "properties": {
              "exclusive": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "QueryOptions_for_String": {
        "description": "QueryOptions are used to pass in options to a query function",
        "type": "object",
        "properties": {
          "descending": {
            "description": "Whether to sort items in ascending or descending order",
            "type": [
              "boolean",
              "null"
            ]
          },
          "limit": {
            "description": "The number of items that will be returned",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          },
          "max": {
            "description": "The maximum key value to fetch",
            "anyOf": [
              {
                "$ref": "#/definitions/QueryBound_for_String"
              },
              {
                "type": "null"
              }
            ]
          },
          "min": {
            "description": "The minimum key value to fetch",
            "anyOf": [
              {
                "$ref": "#/definitions/QueryBound_for_String"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "nft_deposits": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NftDepositsResponse",
      "type": "object",
      "required": [
        "collection",
        "token_ids"
      ],
      "properties": {
        "collection": {
          "$ref": "#/definitions/Addr"
        },
        "token_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "pair": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Pair",
      "type": "object",
      "required": [
        "config",
        "immutable",
        "internal",
        "total_tokens"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/PairConfig_for_Addr"
        },
        "immutable": {
          "$ref": "#/definitions/PairImmutable_for_Addr"
        },
        "internal": {
          "$ref": "#/definitions/PairInternal"
        },
        "total_tokens": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "BondingCurve": {
          "description": "BondingCurve refers to the curve used to calculate the spot price for the pair * Linear: A linear curve that increments by a constant amount (delta) * Exponential: An exponential curve that increments by a percentage amount (delta) * ConstantProduct: A constant product curve that maintains a constant product of the two assets",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "constant_product"
              ]
            },
            {
              "type": "object",
              "required": [
                "linear"
              ],
              "properties": {
                "linear": {
                  "type": "object",
                  "required": [
                    "delta",
                    "spot_price"
                  ],
                  "properties": {
                    "delta": {
                      "description": "The amount by which the spot price will increment/decrement For linear curves, this is the constant amount For exponential curves, this is the percentage amount (treated as basis points)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    },
                    "spot_price": {
                      "description": "A moving value used to derive the price at which the pair will trade assets Note: this value is not necessarily the final sale price for pair assets",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "exponential"
              ],
              "properties": {
                "exponential": {
                  "type": "object",
                  "required": [
                    "delta",
                    "spot_price"
                  ],
                  "properties": {
                    "delta": {
                      "description": "The amount by which the spot price will increment/decrement For linear curves, this is the constant amount For exponential curves, this is the percentage amount (treated as basis points)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Decimal"
                        }
                      ]
                    },
                    "spot_price": {
                      "description": "A moving value used to derive the price at which the pair will trade assets Note: this value is not necessarily the final sale price for pair assets",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "PairConfig_for_Addr": {
          "description": "PairConfig represents the configuration parameters for a pair, set by the user",
          "type": "object",
          "required": [
            "bonding_curve",
            "is_active",
            "pair_type"
          ],
          "properties": {
            "asset_recipient": {
              "description": "The address of the recipient of assets traded into the pair",
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "bonding_curve": {
              "description": "The bonding curve used to calculate the spot price",
              "allOf": [
                {
                  "$ref": "#/definitions/BondingCurve"
                }
              ]
            },
            "is_active": {
              "description": "Whether or not the pair is accepting trades",
              "type": "boolean"
            },
            "pair_type": {
              "description": "The type of assets held by the pair",
              "allOf": [
                {
                  "$ref": "#/definitions/PairType"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "PairImmutable_for_Addr": {
          "type": "object",
          "required": [
            "collection",
            "denom",
            "owner"
          ],
          "properties": {
            "collection": {
              "description": "The address of the NFT collection contract",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "denom": {
              "description": "The denom of the tokens held by the pair",
              "type": "string"
            },
            "owner": {
              "description": "The address of the pair owner",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "PairInternal": {
          "description": "PairInternal represents the internal state of the pair, not directly set by the user",
          "type": "object",
          "required": [
            "total_nfts"
          ],
          "properties": {
            "buy_from_pair_quote_summary": {
              "description": "A breakdown of the fees to be paid out for the next \"buy from\" trade When set to `None`, the pair is not accepting \"buy from\" trades.",
              "anyOf": [
                {
                  "$ref": "#/definitions/QuoteSummary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sell_to_pair_quote_summary": {
              "description": "A breakdown of the fees to be paid out for the next \"sell to\" trade. When set to `None`, the pair is not accepting \"sell to\" trades.",
              "anyOf": [
                {
                  "$ref": "#/definitions/QuoteSummary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "total_nfts": {
              "description": "The total amount of NFTs held by the pair",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "PairType": {
          "description": "PairType refers to the assets held by the pair * Token: A pair that holds fungible tokens * Nft: A pair that holds NFTs * Trade: A pair that holds both fungible tokens and NFTs",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "token",
                "nft"
              ]
            },
            {
              "type": "object",
              "required": [
                "trade"
              ],
              "properties": {
                "trade": {
                  "type": "object",
                  "required": [
                    "reinvest_nfts",
                    "reinvest_tokens",
                    "swap_fee_percent"
                  ],
                  "properties": {
                    "reinvest_nfts": {
                      "description": "Whether or not the NFTs sold into the pair will be reinvested",
                      "type": "boolean"
                    },
                    "reinvest_tokens": {
                      "description": "Whether or not the tokens sold into the pair will be reinvested",
                      "type": "boolean"
                    },
                    "swap_fee_percent": {
                      "description": "The percentage of the swap that will be paid to the pair owner Note: this only applies to Trade pairs",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Decimal"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "QuoteSummary": {
          "description": "QuoteSummary represents the breakdown of token payments for the next trade",
          "type": "object",
          "required": [
            "fair_burn",
            "seller_amount"
          ],
          "properties": {
            "fair_burn": {
              "$ref": "#/definitions/TokenPayment"
            },
            "royalty": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TokenPayment"
                },
                {
                  "type": "null"
                }
              ]
            },
            "seller_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "swap": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TokenPayment"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "TokenPayment": {
          "type": "object",
          "required": [
            "amount",
            "recipient"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "recipient": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
