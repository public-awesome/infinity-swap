{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PoolInfo",
  "description": "A convenience struct for creating Pools",
  "type": "object",
  "required": [
    "bonding_curve",
    "collection",
    "delta",
    "finders_fee_percent",
    "pool_type",
    "reinvest_nfts",
    "reinvest_tokens",
    "spot_price",
    "swap_fee_percent"
  ],
  "properties": {
    "asset_recipient": {
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "bonding_curve": {
      "$ref": "#/definitions/BondingCurve"
    },
    "collection": {
      "$ref": "#/definitions/Addr"
    },
    "delta": {
      "$ref": "#/definitions/Uint128"
    },
    "finders_fee_percent": {
      "$ref": "#/definitions/Decimal"
    },
    "pool_type": {
      "$ref": "#/definitions/PoolType"
    },
    "reinvest_nfts": {
      "type": "boolean"
    },
    "reinvest_tokens": {
      "type": "boolean"
    },
    "spot_price": {
      "$ref": "#/definitions/Uint128"
    },
    "swap_fee_percent": {
      "$ref": "#/definitions/Decimal"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "BondingCurve": {
      "description": "BondingCurve refers to the curve used to calculate the spot price for the pool * Linear: A linear curve that increments by a constant amount (delta) * Exponential: An exponential curve that increments by a percentage amount (delta) * ConstantProduct: A constant product curve that maintains a constant product of the two assets",
      "type": "string",
      "enum": [
        "linear",
        "exponential",
        "constant_product"
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "PoolType": {
      "description": "PoolType refers to the assets held by the pool * Token: A pool that holds fungible tokens * Nft: A pool that holds NFTs * Trade: A pool that holds both fungible tokens and NFTs",
      "type": "string",
      "enum": [
        "token",
        "nft",
        "trade"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
