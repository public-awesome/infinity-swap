{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Create a new pool, defaults to an inactive state",
      "type": "object",
      "required": [
        "create_token_pool"
      ],
      "properties": {
        "create_token_pool": {
          "type": "object",
          "required": [
            "bonding_curve",
            "collection",
            "delta",
            "finders_fee_bps",
            "spot_price"
          ],
          "properties": {
            "asset_recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "bonding_curve": {
              "$ref": "#/definitions/BondingCurve"
            },
            "collection": {
              "type": "string"
            },
            "delta": {
              "$ref": "#/definitions/Uint128"
            },
            "finders_fee_bps": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "spot_price": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_nft_pool"
      ],
      "properties": {
        "create_nft_pool": {
          "type": "object",
          "required": [
            "bonding_curve",
            "collection",
            "delta",
            "finders_fee_bps",
            "spot_price"
          ],
          "properties": {
            "asset_recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "bonding_curve": {
              "$ref": "#/definitions/BondingCurve"
            },
            "collection": {
              "type": "string"
            },
            "delta": {
              "$ref": "#/definitions/Uint128"
            },
            "finders_fee_bps": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "spot_price": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_trade_pool"
      ],
      "properties": {
        "create_trade_pool": {
          "type": "object",
          "required": [
            "bonding_curve",
            "collection",
            "delta",
            "finders_fee_bps",
            "reinvest_nfts",
            "reinvest_tokens",
            "spot_price",
            "swap_fee_bps"
          ],
          "properties": {
            "asset_recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "bonding_curve": {
              "$ref": "#/definitions/BondingCurve"
            },
            "collection": {
              "type": "string"
            },
            "delta": {
              "$ref": "#/definitions/Uint128"
            },
            "finders_fee_bps": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "reinvest_nfts": {
              "type": "boolean"
            },
            "reinvest_tokens": {
              "type": "boolean"
            },
            "spot_price": {
              "$ref": "#/definitions/Uint128"
            },
            "swap_fee_bps": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Deposit tokens into a pool",
      "type": "object",
      "required": [
        "deposit_tokens"
      ],
      "properties": {
        "deposit_tokens": {
          "type": "object",
          "required": [
            "pool_id"
          ],
          "properties": {
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Deposit NFTs into a pool",
      "type": "object",
      "required": [
        "deposit_nfts"
      ],
      "properties": {
        "deposit_nfts": {
          "type": "object",
          "required": [
            "collection",
            "nft_token_ids",
            "pool_id"
          ],
          "properties": {
            "collection": {
              "type": "string"
            },
            "nft_token_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw tokens from a pool",
      "type": "object",
      "required": [
        "withdraw_tokens"
      ],
      "properties": {
        "withdraw_tokens": {
          "type": "object",
          "required": [
            "amount",
            "pool_id"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "asset_recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw all tokens from a pool",
      "type": "object",
      "required": [
        "withdraw_all_tokens"
      ],
      "properties": {
        "withdraw_all_tokens": {
          "type": "object",
          "required": [
            "pool_id"
          ],
          "properties": {
            "asset_recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw NFTs from a pool",
      "type": "object",
      "required": [
        "withdraw_nfts"
      ],
      "properties": {
        "withdraw_nfts": {
          "type": "object",
          "required": [
            "nft_token_ids",
            "pool_id"
          ],
          "properties": {
            "asset_recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "nft_token_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw all NFTs from a pool",
      "type": "object",
      "required": [
        "withdraw_all_nfts"
      ],
      "properties": {
        "withdraw_all_nfts": {
          "type": "object",
          "required": [
            "pool_id"
          ],
          "properties": {
            "asset_recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update the parameters of a pool",
      "type": "object",
      "required": [
        "update_pool_config"
      ],
      "properties": {
        "update_pool_config": {
          "type": "object",
          "required": [
            "pool_id"
          ],
          "properties": {
            "asset_recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "delta": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "finders_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "reinvest_nfts": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "reinvest_tokens": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "spot_price": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "swap_fee_bps": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_active_pool"
      ],
      "properties": {
        "set_active_pool": {
          "type": "object",
          "required": [
            "is_active",
            "pool_id"
          ],
          "properties": {
            "is_active": {
              "type": "boolean"
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove a pool from contract storage and indexing",
      "type": "object",
      "required": [
        "remove_pool"
      ],
      "properties": {
        "remove_pool": {
          "type": "object",
          "required": [
            "pool_id"
          ],
          "properties": {
            "asset_recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap NFTs for tokens directly with a specified pool",
      "type": "object",
      "required": [
        "direct_swap_nfts_for_tokens"
      ],
      "properties": {
        "direct_swap_nfts_for_tokens": {
          "type": "object",
          "required": [
            "nfts_to_swap",
            "pool_id",
            "swap_params"
          ],
          "properties": {
            "nfts_to_swap": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NftSwap"
              }
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "swap_params": {
              "$ref": "#/definitions/SwapParams"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap NFTs for tokens at optimal sale prices",
      "type": "object",
      "required": [
        "swap_nfts_for_tokens"
      ],
      "properties": {
        "swap_nfts_for_tokens": {
          "type": "object",
          "required": [
            "collection",
            "nfts_to_swap",
            "swap_params"
          ],
          "properties": {
            "collection": {
              "type": "string"
            },
            "nfts_to_swap": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NftSwap"
              }
            },
            "swap_params": {
              "$ref": "#/definitions/SwapParams"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap tokens for NFTs directly with a specified pool Note: client must specify which NFTs they want to swap for",
      "type": "object",
      "required": [
        "direct_swap_tokens_for_specific_nfts"
      ],
      "properties": {
        "direct_swap_tokens_for_specific_nfts": {
          "type": "object",
          "required": [
            "nfts_to_swap_for",
            "pool_id",
            "swap_params"
          ],
          "properties": {
            "nfts_to_swap_for": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NftSwap"
              }
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "swap_params": {
              "$ref": "#/definitions/SwapParams"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap tokens for specific NFTs at optimal purchase prices",
      "type": "object",
      "required": [
        "swap_tokens_for_specific_nfts"
      ],
      "properties": {
        "swap_tokens_for_specific_nfts": {
          "type": "object",
          "required": [
            "collection",
            "pool_nfts_to_swap_for",
            "swap_params"
          ],
          "properties": {
            "collection": {
              "type": "string"
            },
            "pool_nfts_to_swap_for": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PoolNftSwap"
              }
            },
            "swap_params": {
              "$ref": "#/definitions/SwapParams"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap tokens for any NFTs at optimal purchase prices",
      "type": "object",
      "required": [
        "swap_tokens_for_any_nfts"
      ],
      "properties": {
        "swap_tokens_for_any_nfts": {
          "type": "object",
          "required": [
            "collection",
            "max_expected_token_input",
            "swap_params"
          ],
          "properties": {
            "collection": {
              "type": "string"
            },
            "max_expected_token_input": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "swap_params": {
              "$ref": "#/definitions/SwapParams"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "BondingCurve": {
      "description": "BondingCurve refers to the curve used to calculate the spot price for the pool * Linear: A linear curve that increments by a constant amount (delta) * Exponential: An exponential curve that increments by a percentage amount (delta) * ConstantProduct: A constant product curve that maintains a constant product of the two assets",
      "type": "string",
      "enum": [
        "linear",
        "exponential",
        "constant_product"
      ]
    },
    "NftSwap": {
      "description": "NftSwap contains the parameters for an NFT swap",
      "type": "object",
      "required": [
        "nft_token_id",
        "token_amount"
      ],
      "properties": {
        "nft_token_id": {
          "description": "The id of the NFT to swap",
          "type": "string"
        },
        "token_amount": {
          "description": "The amount of tokens to accept in exchange for the NFT Note: this could be the minimum acceptable amount for a sale or the maximum acceptable amount for a purchase",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PoolNftSwap": {
      "description": "PoolNftSwap is the parent of NftSwap and organizes swaps by pool_id",
      "type": "object",
      "required": [
        "nft_swaps",
        "pool_id"
      ],
      "properties": {
        "nft_swaps": {
          "description": "The NFT swaps to execute",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NftSwap"
          }
        },
        "pool_id": {
          "description": "The id of the pool to swap in",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "SwapParams": {
      "description": "SwapParams contains the parameters for a swap",
      "type": "object",
      "required": [
        "deadline",
        "robust"
      ],
      "properties": {
        "asset_recipient": {
          "description": "The address to receive the assets from the swap, if not specified is set to sender",
          "type": [
            "string",
            "null"
          ]
        },
        "deadline": {
          "description": "The deadline after which the swap will be rejected",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        },
        "finder": {
          "description": "The address of the finder, will receive a portion of the fees equal to percentage set by the pool",
          "type": [
            "string",
            "null"
          ]
        },
        "robust": {
          "description": "Whether or not to revert the entire trade if one of the swaps fails",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
